# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `trailblazer-macro` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Trailblazer
  class << self
    def Context(wrapped_options, mutable_options = T.unsafe(nil), context_options = T.unsafe(nil)); end
    def Operation(options); end
    def Option(proc); end
  end
end

module Trailblazer::Activity::DSL::Linear::Helper
  mixes_in_class_methods ::Trailblazer::Activity::DSL::Linear::Helper::ClassMethods

  class << self
    def included(base); end
  end
end

module Trailblazer::Activity::DSL::Linear::Helper::ClassMethods
  extend ::Forwardable

  def End(semantic); end
  def Id(id); end
  def Model(*args, &block); end
  def Nested(*args, &block); end
  def Output(signal, semantic = T.unsafe(nil)); end
  def Path(track_color: T.unsafe(nil), connect_to: T.unsafe(nil), before: T.unsafe(nil), **options, &block); end
  def Rescue(*args, &block); end
  def Subprocess(activity, patch: T.unsafe(nil)); end
  def Track(color, wrap_around: T.unsafe(nil)); end
  def Wrap(*args, &block); end
  def end_id(_end); end
  def normalize(options, local_keys); end

  private

  def connect_for_sequence(sequence, connect_to:); end
end

Trailblazer::Activity::DSL::Linear::Helper::Contract = Trailblazer::Macro::Contract

class Trailblazer::Activity::DSL::Linear::Helper::Extension < ::Struct
  def call(*args, &block); end
  def callable; end
  def callable=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Trailblazer::Activity::DSL::Linear::Helper::Id < ::Struct
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Trailblazer::Activity::DSL::Linear::Helper::OutputSemantic < ::Struct
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

Trailblazer::Activity::DSL::Linear::Helper::Policy = Trailblazer::Macro::Policy

class Trailblazer::Activity::DSL::Linear::Helper::Track < ::Struct
  def adds; end
  def adds=(_); end
  def color; end
  def color=(_); end
  def options; end
  def options=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

module Trailblazer::Macro
  class << self
    def Model(model_class, action = T.unsafe(nil), find_by_key = T.unsafe(nil), id: T.unsafe(nil), not_found_terminus: T.unsafe(nil)); end
    def Nested(callable, id: T.unsafe(nil), auto_wire: T.unsafe(nil)); end
    def Rescue(*exceptions, handler: T.unsafe(nil), &block); end
    def Wrap(user_wrap, id: T.unsafe(nil), &block); end
  end
end

Trailblazer::Macro::Linear = Trailblazer::Activity::DSL::Linear

class Trailblazer::Macro::Model
  def call(options, params: T.unsafe(nil), **_arg2); end
end

class Trailblazer::Macro::Model::Builder
  def call(options, params); end
  def find_by!(model_class, params, action, find_by_key, *_arg4); end
  def new!(model_class, params, *_arg2); end
  def pass_through!(model_class, params, action, find_by_key, *_arg4); end
end

module Trailblazer::Macro::Nested
  class << self
    def operation_class; end
  end
end

class Trailblazer::Macro::Nested::Dynamic
  def initialize(nested_activity_decider, auto_wire: T.unsafe(nil)); end

  def compute_nested_activity(wrap_ctx, original_args); end
  def compute_return_signal(wrap_ctx, original_args); end
  def outputs; end

  private

  def compute_task_outputs; end
end

Trailblazer::Macro::Nested::Dynamic::STATIC_OUTPUTS = T.let(T.unsafe(nil), Hash)
Trailblazer::Macro::NoopHandler = T.let(T.unsafe(nil), Proc)

module Trailblazer::Macro::Policy
  class << self
    def Guard(proc, name: T.unsafe(nil), &block); end
    def Pundit(policy_class, action, name: T.unsafe(nil)); end
    def step(condition, options, &block); end
  end
end

class Trailblazer::Macro::Policy::Eval
  def initialize(name: T.unsafe(nil), path: T.unsafe(nil)); end

  def call(_arg0, **circuit_options); end
end

module Trailblazer::Macro::Policy::Guard
  class << self
    def build(callable); end
  end
end

module Trailblazer::Macro::Policy::Pundit
  class << self
    def build(*args, &block); end
  end
end

class Trailblazer::Macro::Policy::Pundit::Condition
  def initialize(policy_class, action); end

  def call(_arg0, *_arg1); end

  private

  def build_policy(options); end
  def result!(success, policy); end
end

module Trailblazer::Macro::Rescue
  class << self
    def deprecate_positional_handler_signature(handler); end
  end
end

module Trailblazer::Macro::Wrap; end

class Trailblazer::Macro::Wrap::Wrapped
  def initialize(operation, user_wrap, outputs); end

  def call(_arg0, **circuit_options); end
  def call_wrapped_activity(_arg0, **circuit_options); end

  private

  def deprecate_positional_wrap_signature(user_wrap); end
end
