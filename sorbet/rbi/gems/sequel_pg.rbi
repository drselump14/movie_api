# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/sequel_pg/all/sequel_pg.rbi
#
# sequel_pg-1.14.0

module Sequel::Postgres
  def self.parse_pg_array(arg0, arg1); end
  def self.supports_streaming?; end
end
class Sequel::Postgres::Dataset < Sequel::Dataset
  def _select_map_multiple(ret_cols); end
  def _select_map_single; end
  def as_hash(key_column, value_column = nil, opts = nil); end
  def each(&block); end
  def map(sym = nil); end
  def optimize_model_load; end
  def optimize_model_load=(v); end
  def optimize_model_load?; end
  def to_hash_groups(key_column, value_column = nil, opts = nil); end
  def with_optimize_model_load(v); end
  def yield_each_row(arg0); end
end
class Sequel::Postgres::Adapter < PG::Connection
  def set_single_row_mode; end
end
class Sequel::Postgres::Database < Sequel::Database
  def optimize_model_load; end
  def optimize_model_load=(v); end
end
module Sequel
end
class Sequel::Postgres::PGArray < Anonymous_Delegator_120
  def _literal_append(sql, ds, array); end
  def array_type; end
  def array_type=(arg0); end
  def initialize(array, type = nil); end
  def self.define_array_typecast_method(mod, type, creator, scalar_typecast); end
  def self.register(db_type, opts = nil, &block); end
  def sql_literal_append(ds, sql); end
  include Sequel::SQL::AliasMethods
end
module Sequel::Postgres::PGArray::DatabaseMethods
  def bound_variable_arg(arg, conn); end
  def bound_variable_array(a); end
  def column_definition_default_sql(sql, column); end
  def convert_named_procs_to_procs(named_procs); end
  def freeze; end
  def get_conversion_procs; end
  def pg_array_schema_type(type); end
  def register_array_type(db_type, opts = nil, &block); end
  def schema_column_type(db_type); end
  def schema_type_class(type); end
  def self.extended(db); end
  def typecast_value_bigint_array(v); end
  def typecast_value_bit_array(v); end
  def typecast_value_blob_array(v); end
  def typecast_value_boolean_array(v); end
  def typecast_value_character_array(v); end
  def typecast_value_cid_array(v); end
  def typecast_value_date_array(v); end
  def typecast_value_datetime_array(v); end
  def typecast_value_datetime_timezone_array(v); end
  def typecast_value_decimal_array(v); end
  def typecast_value_float_array(v); end
  def typecast_value_int2vector_array(v); end
  def typecast_value_integer_array(v); end
  def typecast_value_money_array(v); end
  def typecast_value_name_array(v); end
  def typecast_value_oid_array(v); end
  def typecast_value_oidvector_array(v); end
  def typecast_value_pg_array(value, creator, scalar_typecast_method = nil); end
  def typecast_value_real_array(v); end
  def typecast_value_smallint_array(v); end
  def typecast_value_string_array(v); end
  def typecast_value_tid_array(v); end
  def typecast_value_time_array(v); end
  def typecast_value_time_timezone_array(v); end
  def typecast_value_uuid_array(v); end
  def typecast_value_varbit_array(v); end
  def typecast_value_varchar_array(v); end
  def typecast_value_xid_array(v); end
  def typecast_value_xml_array(v); end
end
class Sequel::Postgres::PGArray::Creator
  def call(string); end
  def converter; end
  def initialize(type, converter = nil); end
  def type; end
end
module Sequel::SQL::Builders
  def pg_array(v, array_type = nil); end
end
