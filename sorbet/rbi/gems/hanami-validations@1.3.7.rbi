# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hanami-validations` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Hanami
  class << self
    def app; end
    def app?(app); end
    def boot; end
    def code_reloading?; end
    def configuration; end
    def configure(&blk); end
    def env; end
    def env?(*names); end
    def environment; end
    def logger; end
    def plugin(&blk); end
    def plugins; end
    def public_directory; end
    def root; end
  end
end

Hanami::DEFAULT_PUBLIC_DIRECTORY = T.let(T.unsafe(nil), String)
Hanami::VERSION = T.let(T.unsafe(nil), String)

module Hanami::Validations
  include ::Hanami::Utils::ClassAttribute

  mixes_in_class_methods ::Hanami::Validations::ClassMethods

  def initialize(input = T.unsafe(nil)); end

  def to_h; end
  def validate; end

  class << self
    def included(base); end
  end
end

module Hanami::Validations::ClassMethods
  def messages(type); end
  def messages_path(path); end
  def namespace(name = T.unsafe(nil)); end
  def predicate(name, message: T.unsafe(nil), &blk); end
  def predicates(mod); end
  def validations(&blk); end

  private

  def __messages; end
  def __predicates; end
  def _base_rules; end
  def _build(options = T.unsafe(nil), &blk); end
  def _schema_config; end
  def _schema_predicates; end
  def _schema_type; end
end

Hanami::Validations::DEFAULT_MESSAGES_ENGINE = T.let(T.unsafe(nil), Symbol)

module Hanami::Validations::Form
  include ::Hanami::Utils::ClassAttribute
  include ::Hanami::Validations

  mixes_in_class_methods ::Hanami::Validations::Form::ClassMethods

  class << self
    def included(base); end
  end
end

module Hanami::Validations::Form::ClassMethods
  private

  def _schema_type; end
end

class Hanami::Validations::InlinePredicate
  def initialize(name, message, &blk); end

  def ==(other); end
  def message; end
  def name; end
  def to_proc; end
end

class Hanami::Validations::Namespace
  def initialize(name); end

  def to_s; end

  private

  def name_without_suffix; end
  def underscored_name; end

  class << self
    def new(name, klass); end
  end
end

Hanami::Validations::Namespace::RUBY_NAMESPACE_REPLACEMENT = T.let(T.unsafe(nil), String)
Hanami::Validations::Namespace::RUBY_NAMESPACE_SEPARATOR = T.let(T.unsafe(nil), String)
Hanami::Validations::Namespace::SUFFIX = T.let(T.unsafe(nil), String)
Hanami::Validations::Namespace::SUFFIX_REPLACEMENT = T.let(T.unsafe(nil), String)

module Hanami::Validations::Predicates
  include ::Dry::Logic::Predicates
  include ::Hanami::Utils::ClassAttribute

  class << self
    def included(base); end
  end
end
