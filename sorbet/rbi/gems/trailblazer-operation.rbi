# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/trailblazer-operation/all/trailblazer-operation.rbi
#
# trailblazer-operation-0.7.4

module Trailblazer
  def self.Operation(options); end
end
module Trailblazer::Version
end
module Trailblazer::Version::Operation
end
module Trailblazer::Operation::PublicCall
  def call(options = nil, flow_options = nil, **circuit_options); end
  def call_task(wrap_ctx, original_args); end
  def call_with_circuit_interface(args, **circuit_options); end
  def call_with_flow_options(options, flow_options); end
  def call_with_public_interface(options, flow_options, invoke_class: nil, **circuit_options); end
  def flow_options_for_public_call(options = nil); end
  def initial_wrap_static(*arg0); end
  def options_for_public_call(*args); end
  def self.options_for_public_call(options, flow_options = nil); end
end
class Trailblazer::Operation < Anonymous_Trailblazer_Activity_FastTrack_156
  def self.strategy_call(args, **circuit_options); end
  extend Trailblazer::Operation::PublicCall
  extend Trailblazer::Operation::Trace
end
module Trailblazer::Operation::Trace
  def self.call(operation, options); end
  def trace(options); end
  def wtf?(options); end
end
class Trailblazer::Operation::Trace::Result < SimpleDelegator
  def initialize(result, stack); end
  def wtf; end
  def wtf?; end
end
module Trailblazer::Operation::ClassDependencies
  def [](field); end
  def []=(field, value); end
  def call_with_circuit_interface(arg0, **circuit_options); end
  def class_fields; end
  def context_for_fields(fields, arg1, **arg2); end
  def options_for_public_call(options, flow_options); end
end
module Trailblazer::Operation::DeprecatedMacro
  def self.call(proc, options); end
end
class Trailblazer::Operation::Result
  def [](*args, &block); end
  def data; end
  def failure?; end
  def initialize(success, data); end
  def inspect(*slices); end
  def keys; end
  def slice(*keys); end
  def success?; end
  def to_hash; end
  extend Forwardable
end
module Trailblazer::Operation::Railway
  def self.Result(end_event, options, *arg2); end
  def self.fail!; end
  def self.fail_fast!; end
  def self.pass!; end
  def self.pass_fast!; end
end
class Trailblazer::Operation::Railway::Result < Trailblazer::Operation::Result
  def event; end
  def initialize(success, data, event); end
end
module Trailblazer::Operation::Railway::End
end
module Trailblazer::Operation::Railway::Macaroni
  def self.call(user_proc); end
end
class Trailblazer::Operation::Railway::Macaroni::Option < Trailblazer::Option
  def self.call!(proc, options, *arg2); end
end
class Trailblazer::Activity
end
class Trailblazer::Activity::Railway
end
module Trailblazer::Activity::Railway::End
end
class Trailblazer::Activity::Railway::End::Success < Trailblazer::Activity::End
end
class Trailblazer::Activity::Railway::End::Failure < Trailblazer::Activity::End
end
class Trailblazer::Activity::Railway::End::FailFast < Trailblazer::Activity::Railway::End::Failure
end
class Trailblazer::Activity::Railway::End::PassFast < Trailblazer::Activity::Railway::End::Success
end
module Trailblazer::Activity::Operation
  def self.OptionsForState; end
end
class Anonymous_Trailblazer_Activity_FastTrack_156 < Trailblazer::Activity::FastTrack
end
