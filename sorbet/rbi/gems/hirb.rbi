# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/hirb/all/hirb.rbi
#
# hirb-0.7.3

module Hirb
  def self.add_dynamic_view(view, options, &block); end
  def self.add_view(view, options); end
  def self.config(reload = nil); end
  def self.config=(arg0); end
  def self.config_files; end
  def self.config_files=(arg0); end
  def self.default_config_files; end
  def self.disable; end
  def self.enable(options = nil); end
  def self.read_config_file(file = nil); end
end
module Hirb::Util
  def any_const_get(name); end
  def camelize(string); end
  def capture_stdout(&block); end
  def choose_from_array(array, input, options = nil); end
  def command_exists?(command); end
  def detect_terminal_size; end
  def find_home; end
  def recursive_hash_merge(hash1, hash2); end
  extend Hirb::Util
end
module Hirb::String
  def ljust(string, desired_length); end
  def rjust(string, desired_length); end
  def size(string); end
  def slice(*args); end
  extend Hirb::String
end
class Hirb::Formatter
  def _format_output(output, options, &block); end
  def add_klass_config_if_true(hash, klass); end
  def add_view(klass, view_config); end
  def build_klass_config(output_class); end
  def call_output_method(output_method, output); end
  def config; end
  def determine_output_class(output); end
  def format_output(output, options = nil, &block); end
  def initialize(additional_config = nil); end
  def klass_config(output_class); end
  def parse_console_options(options); end
  def reset_klass_config; end
  def self.dynamic_config; end
  def self.dynamic_config=(arg0); end
  def self.to_a_classes; end
  def self.to_a_classes=(arg0); end
  def to_a_classes; end
end
module Hirb::DynamicView
  def add_module(mod); end
  def dynamic_options(obj); end
  def method_to_class(meth); end
  def self.add(view, options, &block); end
  def self.class_to_method(mod); end
  def self.generate_single_view_module(output_mod, &block); end
  def update_config(meths); end
  def view_method_classes; end
  def view_methods; end
end
class Hirb::Helpers::Table
  def actual_width; end
  def array_to_indices_hash(array); end
  def call_filter(filter, val); end
  def chars; end
  def default_field_lengths; end
  def enforce_field_constraints; end
  def field_lengths; end
  def field_lengths=(arg0); end
  def fields; end
  def fields=(arg0); end
  def filter_values(rows); end
  def format_cell(value, cell_width); end
  def format_values(values); end
  def initialize(rows, options = nil); end
  def max_fields; end
  def max_fields=(arg0); end
  def render; end
  def render_border(which); end
  def render_footer; end
  def render_header; end
  def render_rows; end
  def render_table_description; end
  def render_table_header; end
  def self.choose_style(rows, options); end
  def self.filter_any; end
  def self.filter_any=(arg0); end
  def self.filter_classes; end
  def self.filter_classes=(arg0); end
  def self.last_table; end
  def self.last_table=(arg0); end
  def self.render(rows, options = nil); end
  def set_fields(rows); end
  def set_filter_defaults(rows); end
  def set_headers; end
  def set_rows(rows); end
  def setup_field_lengths; end
  def validate_values(rows); end
  def width; end
  def width=(arg0); end
end
module Hirb::Helpers::Table::Filters
  def comma_join(arr); end
  extend Hirb::Helpers::Table::Filters
end
class Hirb::Helpers::Table::Resizer
  def add_extra_width; end
  def adjust_long_fields; end
  def default_restrict_field_lengths; end
  def field_lengths; end
  def initialize(table); end
  def remaining_width(field); end
  def resize; end
  def self.resize!(table); end
  def sum(arr); end
end
class Hirb::Helpers::Table::TooManyFieldsForWidthError < StandardError
end
class Hirb::Helpers::ObjectTable < Hirb::Helpers::Table
  def self.render(rows, options = nil); end
end
class Hirb::Helpers::AutoTable < Hirb::Helpers::Table
  def self.render(output, options = nil); end
  extend Hirb::DynamicView
  extend Hirb::Views::CouchDb
  extend Hirb::Views::MiscDb
  extend Hirb::Views::MongoDb
  extend Hirb::Views::ORM
  extend Hirb::Views::Rails
end
class Hirb::Helpers::Tree
  def initialize(input_nodes, options = nil); end
  def mark_last_nodes_per_level; end
  def nodes; end
  def nodes=(arg0); end
  def render; end
  def render_basic; end
  def render_description; end
  def render_directory; end
  def render_nodes; end
  def render_number; end
  def render_tree; end
  def self.render(nodes, options = nil); end
  def validate_nodes; end
end
class Hirb::Helpers::Tree::ParentlessNodeError < StandardError
end
class Hirb::Helpers::Tree::Node < Hash
  def get_parents_character(parent_chars); end
  def initialize(hash); end
  def next; end
  def parent; end
  def previous; end
  def render_parent_characters; end
  def root?; end
  def value(indent = nil); end
end
class Hirb::Helpers::Tree::Node::MissingLevelError < StandardError
end
class Hirb::Helpers::Tree::Node::MissingValueError < StandardError
end
class Hirb::Helpers::ParentChildTree < Hirb::Helpers::Tree
  def self.build_node(node, level); end
  def self.render(root_node, options = nil); end
end
class Hirb::Helpers::VerticalTable < Hirb::Helpers::Table
  def render_footer; end
  def render_header; end
  def render_rows; end
  def self.render(rows, options = nil); end
  def setup_field_lengths; end
end
class Hirb::Helpers::MarkdownTable < Hirb::Helpers::Table
  def self.render(rows, options = nil); end
end
class Hirb::Helpers::UnicodeTable < Hirb::Helpers::Table
  def self.render(rows, options = nil); end
end
class Hirb::Helpers::TabTable < Hirb::Helpers::Table
  def render_footer; end
  def render_header; end
  def render_rows; end
  def render_table_header; end
  def self.render(rows, options = nil); end
end
module Hirb::Helpers
  def self.helper_class(klass); end
end
module Hirb::Views::Rails
  def active_record__base_view(obj); end
  def get_active_record_fields(obj); end
end
module Hirb::Views::ORM
  def data_mapper__resource_view(obj); end
  def sequel__model_view(obj); end
end
module Hirb::Views::MongoDb
  def mongo_mapper__document_view(obj); end
  def mongo_mapper__embedded_document_view(obj); end
  def mongoid__document_view(obj); end
end
module Hirb::Views::CouchDb
  def couch_foo__base_view(obj); end
  def couch_potato__persistence_view(obj); end
  def couch_rest__extended_document_view(obj); end
  def default_couch(obj); end
end
module Hirb::Views::MiscDb
  def d_b_i__row_view(obj); end
  def friendly__document_view(obj); end
  def ripple__document_view(obj); end
end
module Hirb::Views
end
module Hirb::Views::Single
end
module Hirb::View
  def self.add(klass, view_config); end
  def self.capture_and_render(&block); end
  def self.config; end
  def self.config_loaded?; end
  def self.default_config; end
  def self.default_render_method; end
  def self.determine_terminal_size(width, height); end
  def self.disable; end
  def self.disable_output_method; end
  def self.enable(options = nil); end
  def self.enable_output_method; end
  def self.enabled?; end
  def self.formatter(reload = nil); end
  def self.formatter=(value); end
  def self.formatter_config; end
  def self.height; end
  def self.load_config(additional_config = nil); end
  def self.merge_or_load_config(additional_config = nil); end
  def self.page_output(output, inspect_mode = nil); end
  def self.pager; end
  def self.pager=(value); end
  def self.render_method; end
  def self.render_method=(arg0); end
  def self.render_output(output, options = nil); end
  def self.reset_render_method; end
  def self.resize(width = nil, height = nil); end
  def self.toggle_formatter; end
  def self.toggle_pager; end
  def self.view_or_page_output(str); end
  def self.view_output(output, options = nil); end
  def self.width; end
end
module Hirb::Console
  def menu(output, options = nil, &block); end
  def self.format_output(output, options = nil, &block); end
  def self.render_output(output, options = nil); end
  def table(output, options = nil); end
  def view(output, options = nil); end
end
class Hirb::Pager
  def activated_by?(string_to_page, inspect_mode = nil); end
  def char_count(string); end
  def height; end
  def initialize(width, height, options = nil); end
  def page(string, inspect_mode); end
  def resize(width, height); end
  def self.basic_pager(output); end
  def self.command_pager(output, options = nil); end
  def self.continue_paging?; end
  def self.default_pager(output, options = nil); end
  def self.pager_command(*commands); end
  def self.valid_pager_command?(cmd); end
  def slice!(output, inspect_mode = nil); end
  def width; end
end
class Hirb::Menu
  def action_object; end
  def add_chosen_to_args(items); end
  def choose_from_menu; end
  def cleanup_new_args; end
  def command; end
  def default_field; end
  def execute_action(chosen); end
  def fields; end
  def get_input; end
  def get_readline_input(prompt); end
  def initialize(options = nil); end
  def input_to_tokens(input); end
  def invoke(cmd, args); end
  def map_tokens(tokens); end
  def parse_input(input); end
  def parse_word(word); end
  def pre_prompt; end
  def readline_loads?; end
  def render(output, &block); end
  def return_cell_values?; end
  def self.render(output, options = nil, &block); end
  def split_input_args(input); end
  def table_helper_class?; end
  def unalias_field(field); end
  def unasked_choice; end
end
class Hirb::Menu::Error < StandardError
end
