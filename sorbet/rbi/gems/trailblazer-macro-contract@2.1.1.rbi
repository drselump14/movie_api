# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `trailblazer-macro-contract` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Trailblazer
  class << self
    def Context(wrapped_options, mutable_options = T.unsafe(nil), context_options = T.unsafe(nil)); end
    def Operation(options); end
    def Option(proc); end
  end
end

module Trailblazer::Activity::DSL::Linear::Helper
  mixes_in_class_methods ::Trailblazer::Activity::DSL::Linear::Helper::ClassMethods

  class << self
    def included(base); end
  end
end

Trailblazer::Activity::DSL::Linear::Helper::Contract = Trailblazer::Macro::Contract

class Trailblazer::Activity::DSL::Linear::Helper::Extension < ::Struct
  def call(*args, &block); end
  def callable; end
  def callable=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Trailblazer::Activity::DSL::Linear::Helper::Id < ::Struct
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Trailblazer::Activity::DSL::Linear::Helper::OutputSemantic < ::Struct
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

Trailblazer::Activity::DSL::Linear::Helper::Policy = Trailblazer::Macro::Policy

class Trailblazer::Activity::DSL::Linear::Helper::Track < ::Struct
  def adds; end
  def adds=(_); end
  def color; end
  def color=(_); end
  def options; end
  def options=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

module Trailblazer::Macro
  class << self
    def Model(model_class, action = T.unsafe(nil), find_by_key = T.unsafe(nil), id: T.unsafe(nil), not_found_terminus: T.unsafe(nil)); end
    def Nested(callable, id: T.unsafe(nil), auto_wire: T.unsafe(nil)); end
    def Rescue(*exceptions, handler: T.unsafe(nil), &block); end
    def Wrap(user_wrap, id: T.unsafe(nil), &block); end
  end
end

module Trailblazer::Macro::Contract
  class << self
    def Build(name: T.unsafe(nil), constant: T.unsafe(nil), builder: T.unsafe(nil)); end
    def Persist(method: T.unsafe(nil), name: T.unsafe(nil)); end
    def Validate(skip_extract: T.unsafe(nil), name: T.unsafe(nil), representer: T.unsafe(nil), key: T.unsafe(nil), constant: T.unsafe(nil), invalid_data_terminus: T.unsafe(nil)); end
  end
end

module Trailblazer::Macro::Contract::Build
  class << self
    def call(options, circuit_options, name: T.unsafe(nil), constant: T.unsafe(nil), builder: T.unsafe(nil)); end
    def call_builder(ctx, circuit_options, builder: T.unsafe(nil), constant: T.unsafe(nil), name: T.unsafe(nil)); end
  end
end

module Trailblazer::Macro::Contract::DSL
  def contract(name = T.unsafe(nil), constant = T.unsafe(nil), base: T.unsafe(nil), &block); end

  class << self
    def extended(extender); end
  end
end

class Trailblazer::Macro::Contract::Validate
  def initialize(name: T.unsafe(nil), representer: T.unsafe(nil), params_path: T.unsafe(nil), constant: T.unsafe(nil)); end

  def call(ctx, **_arg1); end
  def validate!(options, representer: T.unsafe(nil), from: T.unsafe(nil), params_path: T.unsafe(nil)); end
end

class Trailblazer::Macro::Contract::Validate::Extract
  def initialize(key: T.unsafe(nil), params_path: T.unsafe(nil)); end

  def call(ctx, params: T.unsafe(nil), **_arg2); end
end

Trailblazer::Macro::Linear = Trailblazer::Activity::DSL::Linear
Trailblazer::Macro::NoopHandler = T.let(T.unsafe(nil), Proc)
