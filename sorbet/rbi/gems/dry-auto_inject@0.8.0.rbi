# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dry-auto_inject` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Dry
  class << self
    def AutoInject(container, options = T.unsafe(nil)); end
    def Equalizer(*keys, **options); end
  end
end

module Dry::AutoInject; end

class Dry::AutoInject::Builder < ::BasicObject
  def initialize(container, options = T.unsafe(nil)); end

  def [](*dependency_names); end
  def container; end
  def respond_to?(name, include_private = T.unsafe(nil)); end
  def strategies; end

  private

  def method_missing(name, *args, &block); end
end

class Dry::AutoInject::DependencyMap
  def initialize(*dependencies); end

  def inspect; end
  def names; end
  def to_h; end
  def to_hash; end

  private

  def add_dependency(name, identifier); end
  def name_for(identifier); end
end

class Dry::AutoInject::DependencyNameInvalid < ::StandardError; end
class Dry::AutoInject::DuplicateDependencyError < ::StandardError; end

class Dry::AutoInject::Injector < ::BasicObject
  def initialize(container, strategy, builder:); end

  def [](*dependency_names); end
  def builder; end
  def container; end
  def respond_to?(name, include_private = T.unsafe(nil)); end
  def strategy; end

  private

  def method_missing(name, *args, &block); end
end

class Dry::AutoInject::MethodParameters
  def initialize(parameters); end

  def empty?; end
  def keyword?(name); end
  def keyword_names; end
  def length; end
  def parameters; end
  def pass_through?; end
  def sequential_arguments?; end
  def splat?; end

  class << self
    def of(obj, name); end
  end
end

Dry::AutoInject::MethodParameters::EMPTY = T.let(T.unsafe(nil), Dry::AutoInject::MethodParameters)
Dry::AutoInject::MethodParameters::PASS_THROUGH = T.let(T.unsafe(nil), Array)

class Dry::AutoInject::Strategies
  extend ::Dry::Container::Mixin
  extend ::Dry::Core::Constants
  extend ::Dry::Configurable
  extend ::Dry::Configurable::Methods
  extend ::Dry::Configurable::ClassMethods

  class << self
    def register_default(name, strategy); end
  end
end

class Dry::AutoInject::Strategies::Args < ::Dry::AutoInject::Strategies::Constructor
  private

  def define_initialize(klass); end
  def define_initialize_with_params; end
  def define_initialize_with_splat(super_parameters); end
  def define_new; end
end

class Dry::AutoInject::Strategies::Constructor < ::Module
  def initialize(container, *dependency_names); end

  def class_mod; end
  def container; end
  def dependency_map; end
  def included(klass); end
  def instance_mod; end

  private

  def define_initialize(klass); end
  def define_new; end
  def define_readers; end
end

class Dry::AutoInject::Strategies::Constructor::ClassMethods < ::Module; end
class Dry::AutoInject::Strategies::Constructor::InstanceMethods < ::Module; end

class Dry::AutoInject::Strategies::Hash < ::Dry::AutoInject::Strategies::Constructor
  private

  def define_initialize(klass); end
  def define_new; end
end

class Dry::AutoInject::Strategies::Kwargs < ::Dry::AutoInject::Strategies::Constructor
  private

  def assign_dependencies(kwargs, destination); end
  def define_initialize(klass); end
  def define_initialize_with_keywords(super_parameters); end
  def define_initialize_with_splat(super_parameters); end
  def define_new; end
  def slice_kwargs(kwargs, super_parameters); end
end

Dry::AutoInject::VALID_NAME = T.let(T.unsafe(nil), Regexp)
