# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `trailblazer-developer` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Trailblazer
  class << self
    def Context(wrapped_options, mutable_options = T.unsafe(nil), context_options = T.unsafe(nil)); end
    def Operation(options); end
    def Option(proc); end
  end
end

module Trailblazer::Developer
  private

  def render(activity, **options); end
  def wtf(activity, *args, **circuit_options); end

  class << self
    def railway(*args); end
    def render(activity, **options); end
    def wtf(activity, *args, **circuit_options); end
    def wtf?(activity, *args, **circuit_options); end
  end
end

module Trailblazer::Developer::Generate
  private

  def call(hash); end
  def compute_intermediate(ctx, elements:, start_events:, **_arg3); end
  def data_for(element); end
  def extract_semantic(label); end
  def find_start_events(ctx, elements:, **_arg2); end
  def semantic_for(label: T.unsafe(nil), **_arg1); end
  def transform_from_hash(ctx, hash:, parser: T.unsafe(nil), **_arg3); end

  class << self
    def call(hash); end
    def compute_intermediate(ctx, elements:, start_events:, **_arg3); end
    def data_for(element); end
    def extract_semantic(label); end
    def find_start_events(ctx, elements:, **_arg2); end
    def semantic_for(label: T.unsafe(nil), **_arg1); end
    def transform_from_hash(ctx, hash:, parser: T.unsafe(nil), **_arg3); end
  end
end

class Trailblazer::Developer::Generate::Arrow < ::Struct
  def label; end
  def label=(_); end
  def message; end
  def message=(_); end
  def target; end
  def target=(_); end
  def target_lane; end
  def target_lane=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Trailblazer::Developer::Generate::Element < ::Struct
  def data; end
  def data=(_); end
  def id; end
  def id=(_); end
  def label; end
  def label=(_); end
  def linksTo; end
  def linksTo=(_); end
  def parent; end
  def parent=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Trailblazer::Developer::Generate::Pipeline < ::Trailblazer::Activity::Railway; end
module Trailblazer::Developer::Generate::Representer; end

class Trailblazer::Developer::Generate::Representer::Activity < ::Representable::Decorator
  include ::Representable::Hash
  extend ::Representable::Hash::ClassMethods
end

module Trailblazer::Developer::Render; end

module Trailblazer::Developer::Render::Circuit
  private

  def call(activity, **options); end
  def circuit_hash(graph, **options); end
  def inspect_end(task); end
  def inspect_task(task); end
  def inspect_with_matcher(task, inspect_task: T.unsafe(nil), inspect_end: T.unsafe(nil)); end

  class << self
    def call(activity, **options); end
    def circuit_hash(graph, **options); end
    def inspect_end(task); end
    def inspect_task(task); end
    def inspect_with_matcher(task, inspect_task: T.unsafe(nil), inspect_end: T.unsafe(nil)); end
    def strip(string); end
  end
end

module Trailblazer::Developer::Render::Linear
  private

  def call(operation, options = T.unsafe(nil)); end
  def inspect_func(step); end
  def inspect_line(names); end
  def inspect_rows(names); end

  class << self
    def call(operation, options = T.unsafe(nil)); end
    def inspect_func(step); end
    def inspect_line(names); end
    def inspect_rows(names); end
  end
end

Trailblazer::Developer::Render::Linear::Operator = T.let(T.unsafe(nil), Hash)

module Trailblazer::Developer::Trace
  private

  def capture_args(wrap_config, _arg1); end
  def capture_return(wrap_config, _arg1); end
  def default_input_data_collector(wrap_config, _arg1, circuit_options); end
  def default_output_data_collector(wrap_config, _arg1, _); end
  def merge_plan; end

  class << self
    def arguments_for_call(activity, _arg1, **original_circuit_options); end
    def call(activity, _arg1, **circuit_options); end
    def capture_args(wrap_config, _arg1); end
    def capture_return(wrap_config, _arg1); end
    def default_input_data_collector(wrap_config, _arg1, circuit_options); end
    def default_output_data_collector(wrap_config, _arg1, _); end
    def invoke(activity, _arg1, **circuit_options); end
    def merge_plan; end
  end
end

Trailblazer::Developer::Trace::Activity = Trailblazer::Activity

class Trailblazer::Developer::Trace::Entity < ::Struct
  def activity; end
  def activity=(_); end
  def data; end
  def data=(_); end
  def task; end
  def task=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Trailblazer::Developer::Trace::Entity::Input < ::Trailblazer::Developer::Trace::Entity; end
class Trailblazer::Developer::Trace::Entity::Output < ::Trailblazer::Developer::Trace::Entity; end

module Trailblazer::Developer::Trace::Focusable
  private

  def capture_variables_from(ctx, focus_on:, inspector: T.unsafe(nil), **flow_options); end
  def patched_vertical_table; end
  def tree_nodes_for(level, input:, output:, **options); end
  def vertical_table_for(focused_variables, table_header:); end

  class << self
    def capture_variables_from(ctx, focus_on:, inspector: T.unsafe(nil), **flow_options); end
    def patched_vertical_table; end
    def tree_nodes_for(level, input:, output:, **options); end
    def vertical_table_for(focused_variables, table_header:); end
  end
end

module Trailblazer::Developer::Trace::Inspector
  private

  def activerecord_relation_inspector(value); end
  def array_inspector(value, default_inspector:); end
  def call(value, default_inspector: T.unsafe(nil), **_arg2); end
  def default_inspector(value); end
  def hash_inspector(value, default_inspector:); end

  class << self
    def activerecord_relation_inspector(value); end
    def array_inspector(value, default_inspector:); end
    def call(value, default_inspector: T.unsafe(nil), **_arg2); end
    def default_inspector(value); end
    def hash_inspector(value, default_inspector:); end
  end
end

class Trailblazer::Developer::Trace::Level < ::Array
  def inspect; end

  class << self
    def input_output_nested_for_level(level); end
  end
end

module Trailblazer::Developer::Trace::Present
  private

  def call(stack, level: T.unsafe(nil), tree: T.unsafe(nil), renderer: T.unsafe(nil), **options); end
  def default_renderer(task_node:, **_arg1); end
  def tree(stack, level, tree:, renderer:, **options); end
  def tree_for(stack, level, tree:, **options); end

  class << self
    def call(stack, level: T.unsafe(nil), tree: T.unsafe(nil), renderer: T.unsafe(nil), **options); end
    def default_renderer(task_node:, **_arg1); end
    def tree(stack, level, tree:, renderer:, **options); end
    def tree_for(stack, level, tree:, **options); end
  end
end

module Trailblazer::Developer::Trace::Present::TreeNodes
  private

  def for(level, input:, output:, **options); end

  class << self
    def for(level, input:, output:, **options); end
  end
end

class Trailblazer::Developer::Trace::Present::TreeNodes::Node < ::Struct
  def input; end
  def input=(_); end
  def level; end
  def level=(_); end
  def method_missing(name, *_arg1); end
  def options; end
  def options=(_); end
  def output; end
  def output=(_); end
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Trailblazer::Developer::Trace::Stack
  def initialize; end

  def <<(entity); end
  def indent!; end
  def to_a; end
  def top; end
  def unindent!; end

  private

  def current; end
end

module Trailblazer::Developer::Wtf
  private

  def arguments_for_trace(activity, _arg1, **circuit_options); end
  def capture_variables?(step_name:, focus_on:, **_arg2); end
  def invoke(activity, _arg1, **circuit_options); end
  def trace_input_data_collector(wrap_config, _arg1, circuit_options); end
  def trace_output_data_collector(wrap_config, _arg1, circuit_options); end

  class << self
    def arguments_for_trace(activity, _arg1, **circuit_options); end
    def capture_variables?(step_name:, focus_on:, **_arg2); end
    def invoke(activity, _arg1, **circuit_options); end
    def trace_input_data_collector(wrap_config, _arg1, circuit_options); end
    def trace_output_data_collector(wrap_config, _arg1, circuit_options); end
  end
end

module Trailblazer::Developer::Wtf::Renderer
  private

  def call(tree:, task_node:, position:); end
  def fmt(line, style); end
  def signal_of(task_node); end
  def value_for(tree, task_node, position); end

  class << self
    def call(tree:, task_node:, position:); end
    def fmt(line, style); end
    def signal_of(task_node); end
    def value_for(tree, task_node, position); end
  end
end

Trailblazer::Developer::Wtf::Renderer::DEFAULT_COLOR_MAP = T.let(T.unsafe(nil), Hash)
Trailblazer::Developer::Wtf::Renderer::SIGNALS_MAP = T.let(T.unsafe(nil), Hash)

module Trailblazer::Developer::Wtf::Renderer::String
  private

  def bg_black(str); end
  def bg_blue(str); end
  def bg_brown(str); end
  def bg_cyan(str); end
  def bg_gray(str); end
  def bg_green(str); end
  def bg_magenta(str); end
  def bg_red(str); end
  def black(str); end
  def blue(str); end
  def bold(str); end
  def brown(str); end
  def cyan(str); end
  def gray(str); end
  def green(str); end
  def italic(str); end
  def magenta(str); end
  def red(str); end
  def underline(str); end

  class << self
    def bg_black(str); end
    def bg_blue(str); end
    def bg_brown(str); end
    def bg_cyan(str); end
    def bg_gray(str); end
    def bg_green(str); end
    def bg_magenta(str); end
    def bg_red(str); end
    def black(str); end
    def blue(str); end
    def bold(str); end
    def brown(str); end
    def cyan(str); end
    def gray(str); end
    def green(str); end
    def italic(str); end
    def magenta(str); end
    def red(str); end
    def underline(str); end
  end
end

module Trailblazer::Version; end
module Trailblazer::Version::Developer; end
Trailblazer::Version::Developer::VERSION = T.let(T.unsafe(nil), String)
Trailblazer::Version::VERSION = T.let(T.unsafe(nil), String)
