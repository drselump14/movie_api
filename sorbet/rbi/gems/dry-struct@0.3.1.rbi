# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dry-struct` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Dry
  class << self
    def AutoInject(container, options = T.unsafe(nil)); end
    def Equalizer(*keys, **options); end
  end
end

class Dry::Struct
  extend ::Dry::Struct::ClassInterface
  extend ::Dry::Core::Constants
  extend ::Dry::Configurable
  extend ::Dry::Configurable::Methods
  extend ::Dry::Configurable::ClassMethods
  extend ::Dry::Core::ClassAttributes
  extend ::Dry::Types::Builder
  include ::Dry::Core::Constants

  def initialize(attributes); end

  def [](name); end
  def __new__(changeset); end
  def new(changeset); end
  def to_h; end
  def to_hash; end
end

module Dry::Struct::ClassInterface
  include ::Dry::Core::Constants
  include ::Dry::Core::ClassAttributes
  include ::Dry::Types::Builder

  def [](attributes = T.unsafe(nil)); end
  def argument_error_msg(keys); end
  def attribute(name, type); end
  def attribute?(key); end
  def attribute_names; end
  def attributes(new_schema); end
  def call(attributes = T.unsafe(nil)); end
  def check_invalid_schema_keys; end
  def constrained?; end
  def constructor(constructor = T.unsafe(nil), **_options, &block); end
  def default?; end
  def default_attributes; end
  def failure(*args); end
  def inherited(klass); end
  def new(attributes = T.unsafe(nil)); end
  def optional?; end
  def primitive; end
  def result(klass, *args); end
  def success(*args); end
  def try(input); end
  def valid?(value); end

  private

  def check_schema_duplication(new_schema); end
end

class Dry::Struct::Constructor
  include ::Dry::Core::Equalizer::Methods

  def initialize(type, options = T.unsafe(nil), &block); end

  def [](input); end
  def call(input); end
  def fn; end
  def type; end
end

Dry::Struct::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)
Dry::Struct::EMPTY_HASH = T.let(T.unsafe(nil), Hash)
Dry::Struct::EMPTY_OPTS = T.let(T.unsafe(nil), Hash)
Dry::Struct::EMPTY_SET = T.let(T.unsafe(nil), Set)
Dry::Struct::EMPTY_STRING = T.let(T.unsafe(nil), String)
class Dry::Struct::Error < ::TypeError; end

module Dry::Struct::Hashify
  class << self
    def [](value); end
  end
end

Dry::Struct::IDENTITY = T.let(T.unsafe(nil), Proc)

class Dry::Struct::RepeatedAttributeError < ::ArgumentError
  def initialize(key); end
end

Dry::Struct::Self = T.let(T.unsafe(nil), Proc)
Dry::Struct::Undefined = T.let(T.unsafe(nil), Object)
Dry::Struct::VERSION = T.let(T.unsafe(nil), String)

class Dry::Struct::Value < ::Dry::Struct
  include ::Dry::Equalizer::Methods

  class << self
    def new(*_arg0); end
  end
end
