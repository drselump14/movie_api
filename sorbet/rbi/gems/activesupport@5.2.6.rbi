# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activesupport` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: false

module ActiveSupport; end

class ActiveSupport::HashWithIndifferentAccess < ::Hash
  def initialize(constructor = T.unsafe(nil)); end

  def [](key); end
  def []=(key, value); end
  def assoc(key); end
  def compact; end
  def deep_stringify_keys; end
  def deep_stringify_keys!; end
  def deep_symbolize_keys; end
  def default(*args); end
  def delete(key); end
  def dig(*args); end
  def dup; end
  def extractable_options?; end
  def fetch(key, *extras); end
  def fetch_values(*indices, &block); end
  def has_key?(key); end
  def include?(key); end
  def key?(key); end
  def member?(key); end
  def merge(hash, &block); end
  def merge!(other_hash); end
  def nested_under_indifferent_access; end
  def regular_update(*_arg0); end
  def regular_writer(_arg0, _arg1); end
  def reject(*args, &block); end
  def replace(other_hash); end
  def reverse_merge(other_hash); end
  def reverse_merge!(other_hash); end
  def select(*args, &block); end
  def slice(*keys); end
  def slice!(*keys); end
  def store(key, value); end
  def stringify_keys; end
  def stringify_keys!; end
  def symbolize_keys; end
  def to_hash; end
  def to_options; end
  def to_options!; end
  def transform_keys(*args, &block); end
  def transform_keys!; end
  def transform_values(*args, &block); end
  def update(other_hash); end
  def values_at(*indices); end
  def with_defaults(other_hash); end
  def with_defaults!(other_hash); end
  def with_indifferent_access; end

  private

  def convert_key(key); end
  def convert_value(value, options = T.unsafe(nil)); end
  def set_defaults(target); end

  class << self
    def [](*args); end
  end
end

class Hash
  include ::Enumerable
  include ::JSON::Ext::Generator::GeneratorMethods::Hash

  def assert_valid_keys(*valid_keys); end
  def deep_stringify_keys; end
  def deep_stringify_keys!; end
  def deep_symbolize_keys; end
  def deep_symbolize_keys!; end
  def deep_transform_keys(&block); end
  def deep_transform_keys!(&block); end
  def nested_under_indifferent_access; end
  def reverse_merge(other_hash); end
  def reverse_merge!(other_hash); end
  def reverse_update(other_hash); end
  def stringify_keys; end
  def stringify_keys!; end
  def symbolize_keys; end
  def symbolize_keys!; end
  def to_options; end
  def to_options!; end
  def with_defaults(other_hash); end
  def with_defaults!(other_hash); end
  def with_indifferent_access; end

  private

  def _deep_transform_keys_in_object(object, &block); end
  def _deep_transform_keys_in_object!(object, &block); end
end

HashWithIndifferentAccess = ActiveSupport::HashWithIndifferentAccess

class IO
  include ::Enumerable
  include ::File::Constants
end

class IO::ConsoleMode
  def echo=(_arg0); end
  def raw(*_arg0); end
  def raw!(*_arg0); end

  private

  def initialize_copy(_arg0); end
end

class IO::EAGAINWaitReadable < ::Errno::EAGAIN
  include ::IO::WaitReadable
end

class IO::EAGAINWaitWritable < ::Errno::EAGAIN
  include ::IO::WaitWritable
end

class IO::EINPROGRESSWaitReadable < ::Errno::EINPROGRESS
  include ::IO::WaitReadable
end

class IO::EINPROGRESSWaitWritable < ::Errno::EINPROGRESS
  include ::IO::WaitWritable
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable
IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable

class NameError < ::StandardError
  include ::DidYouMean::Correctable
end

class Numeric
  include ::Comparable
end

class Symbol
  include ::Comparable
end
