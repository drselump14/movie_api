# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hirb` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Hirb
  class << self
    def add_dynamic_view(view, options, &block); end
    def add_view(view, options); end
    def config(reload = T.unsafe(nil)); end
    def config=(_arg0); end
    def config_files; end
    def config_files=(_arg0); end
    def default_config_files; end
    def disable; end
    def enable(options = T.unsafe(nil)); end
    def read_config_file(file = T.unsafe(nil)); end
  end
end

module Hirb::Console
  def menu(output, options = T.unsafe(nil), &block); end
  def table(output, options = T.unsafe(nil)); end
  def view(output, options = T.unsafe(nil)); end

  class << self
    def format_output(output, options = T.unsafe(nil), &block); end
    def render_output(output, options = T.unsafe(nil)); end
  end
end

module Hirb::DynamicView
  def add_module(mod); end
  def dynamic_options(obj); end
  def method_to_class(meth); end
  def update_config(meths); end
  def view_method_classes; end
  def view_methods; end

  class << self
    def add(view, options, &block); end
    def class_to_method(mod); end
    def generate_single_view_module(output_mod, &block); end
  end
end

class Hirb::Formatter
  def initialize(additional_config = T.unsafe(nil)); end

  def _format_output(output, options, &block); end
  def add_klass_config_if_true(hash, klass); end
  def add_view(klass, view_config); end
  def build_klass_config(output_class); end
  def call_output_method(output_method, output); end
  def config; end
  def determine_output_class(output); end
  def format_output(output, options = T.unsafe(nil), &block); end
  def klass_config(output_class); end
  def parse_console_options(options); end
  def reset_klass_config; end
  def to_a_classes; end

  class << self
    def dynamic_config; end
    def dynamic_config=(_arg0); end
    def to_a_classes; end
    def to_a_classes=(_arg0); end
  end
end

module Hirb::Helpers
  class << self
    def helper_class(klass); end
  end
end

class Hirb::Helpers::AutoTable < ::Hirb::Helpers::Table
  extend ::Hirb::DynamicView
  extend ::Hirb::Views::Rails
  extend ::Hirb::Views::ORM
  extend ::Hirb::Views::MongoDb
  extend ::Hirb::Views::CouchDb
  extend ::Hirb::Views::MiscDb

  class << self
    def render(output, options = T.unsafe(nil)); end
  end
end

class Hirb::Helpers::MarkdownTable < ::Hirb::Helpers::Table
  class << self
    def render(rows, options = T.unsafe(nil)); end
  end
end

Hirb::Helpers::MarkdownTable::CHARS = T.let(T.unsafe(nil), Hash)

class Hirb::Helpers::ObjectTable < ::Hirb::Helpers::Table
  class << self
    def render(rows, options = T.unsafe(nil)); end
  end
end

class Hirb::Helpers::ParentChildTree < ::Hirb::Helpers::Tree
  class << self
    def build_node(node, level); end
    def render(root_node, options = T.unsafe(nil)); end
  end
end

class Hirb::Helpers::TabTable < ::Hirb::Helpers::Table
  def render_footer; end
  def render_header; end
  def render_rows; end
  def render_table_header; end

  class << self
    def render(rows, options = T.unsafe(nil)); end
  end
end

Hirb::Helpers::TabTable::DELIM = T.let(T.unsafe(nil), String)

class Hirb::Helpers::Table
  def initialize(rows, options = T.unsafe(nil)); end

  def actual_width; end
  def array_to_indices_hash(array); end
  def call_filter(filter, val); end
  def chars; end
  def default_field_lengths; end
  def enforce_field_constraints; end
  def field_lengths; end
  def field_lengths=(_arg0); end
  def fields; end
  def fields=(_arg0); end
  def filter_values(rows); end
  def format_cell(value, cell_width); end
  def format_values(values); end
  def max_fields; end
  def max_fields=(_arg0); end
  def render; end
  def render_border(which); end
  def render_footer; end
  def render_header; end
  def render_rows; end
  def render_table_description; end
  def render_table_header; end
  def set_fields(rows); end
  def set_filter_defaults(rows); end
  def set_headers; end
  def set_rows(rows); end
  def setup_field_lengths; end
  def validate_values(rows); end
  def width; end
  def width=(_arg0); end

  class << self
    def filter_any; end
    def filter_any=(_arg0); end
    def filter_classes; end
    def filter_classes=(_arg0); end
    def last_table; end
    def last_table=(_arg0); end
    def render(rows, options = T.unsafe(nil)); end

    private

    def choose_style(rows, options); end
  end
end

Hirb::Helpers::Table::BORDER_LENGTH = T.let(T.unsafe(nil), Integer)
Hirb::Helpers::Table::CHARS = T.let(T.unsafe(nil), Hash)

module Hirb::Helpers::Table::Filters
  extend ::Hirb::Helpers::Table::Filters

  def comma_join(arr); end
end

Hirb::Helpers::Table::MIN_FIELD_LENGTH = T.let(T.unsafe(nil), Integer)

class Hirb::Helpers::Table::Resizer
  def initialize(table); end

  def add_extra_width; end
  def adjust_long_fields; end
  def default_restrict_field_lengths; end
  def field_lengths; end
  def remaining_width(field); end
  def resize; end
  def sum(arr); end

  class << self
    def resize!(table); end
  end
end

class Hirb::Helpers::Table::TooManyFieldsForWidthError < ::StandardError; end

class Hirb::Helpers::Tree
  def initialize(input_nodes, options = T.unsafe(nil)); end

  def mark_last_nodes_per_level; end
  def nodes; end
  def nodes=(_arg0); end
  def render; end
  def render_basic; end
  def render_description; end
  def render_directory; end
  def render_nodes; end
  def render_number; end
  def render_tree; end
  def validate_nodes; end

  class << self
    def render(nodes, options = T.unsafe(nil)); end
  end
end

class Hirb::Helpers::Tree::Node < ::Hash
  def initialize(hash); end

  def get_parents_character(parent_chars); end
  def next; end
  def parent; end
  def previous; end
  def render_parent_characters; end
  def root?; end
  def value(indent = T.unsafe(nil)); end
end

class Hirb::Helpers::Tree::Node::MissingLevelError < ::StandardError; end
class Hirb::Helpers::Tree::Node::MissingValueError < ::StandardError; end
class Hirb::Helpers::Tree::ParentlessNodeError < ::StandardError; end

class Hirb::Helpers::UnicodeTable < ::Hirb::Helpers::Table
  class << self
    def render(rows, options = T.unsafe(nil)); end
  end
end

Hirb::Helpers::UnicodeTable::CHARS = T.let(T.unsafe(nil), Hash)

class Hirb::Helpers::VerticalTable < ::Hirb::Helpers::Table
  def render_footer; end
  def render_header; end
  def render_rows; end
  def setup_field_lengths; end

  class << self
    def render(rows, options = T.unsafe(nil)); end
  end
end

class Hirb::Menu
  def initialize(options = T.unsafe(nil)); end

  def action_object; end
  def add_chosen_to_args(items); end
  def choose_from_menu; end
  def cleanup_new_args; end
  def command; end
  def default_field; end
  def execute_action(chosen); end
  def fields; end
  def get_input; end
  def get_readline_input(prompt); end
  def input_to_tokens(input); end
  def invoke(cmd, args); end
  def map_tokens(tokens); end
  def parse_input(input); end
  def parse_word(word); end
  def pre_prompt; end
  def readline_loads?; end
  def render(output, &block); end
  def return_cell_values?; end
  def split_input_args(input); end
  def table_helper_class?; end
  def unalias_field(field); end
  def unasked_choice; end

  class << self
    def render(output, options = T.unsafe(nil), &block); end
  end
end

Hirb::Menu::CHOSEN_ARG = T.let(T.unsafe(nil), String)
Hirb::Menu::CHOSEN_REGEXP = T.let(T.unsafe(nil), Regexp)
Hirb::Menu::DIRECTIONS = T.let(T.unsafe(nil), String)
class Hirb::Menu::Error < ::StandardError; end

class Hirb::Pager
  def initialize(width, height, options = T.unsafe(nil)); end

  def activated_by?(string_to_page, inspect_mode = T.unsafe(nil)); end
  def char_count(string); end
  def height; end
  def page(string, inspect_mode); end
  def resize(width, height); end
  def slice!(output, inspect_mode = T.unsafe(nil)); end
  def width; end

  class << self
    def command_pager(output, options = T.unsafe(nil)); end
    def default_pager(output, options = T.unsafe(nil)); end
    def pager_command(*commands); end
    def valid_pager_command?(cmd); end

    private

    def basic_pager(output); end
    def continue_paging?; end
  end
end

module Hirb::String
  extend ::Hirb::String

  def ljust(string, desired_length); end
  def rjust(string, desired_length); end
  def size(string); end
  def slice(*args); end
end

module Hirb::Util
  extend ::Hirb::Util

  def any_const_get(name); end
  def camelize(string); end
  def capture_stdout(&block); end
  def choose_from_array(array, input, options = T.unsafe(nil)); end
  def command_exists?(command); end
  def detect_terminal_size; end
  def find_home; end
  def recursive_hash_merge(hash1, hash2); end
end

Hirb::VERSION = T.let(T.unsafe(nil), String)

module Hirb::View
  class << self
    def add(klass, view_config); end
    def capture_and_render(&block); end
    def config; end
    def config_loaded?; end
    def default_config; end
    def default_render_method; end
    def determine_terminal_size(width, height); end
    def disable; end
    def disable_output_method; end
    def enable(options = T.unsafe(nil)); end
    def enable_output_method; end
    def enabled?; end
    def formatter(reload = T.unsafe(nil)); end
    def formatter=(value); end
    def formatter_config; end
    def height; end
    def load_config(additional_config = T.unsafe(nil)); end
    def merge_or_load_config(additional_config = T.unsafe(nil)); end
    def page_output(output, inspect_mode = T.unsafe(nil)); end
    def pager; end
    def pager=(value); end
    def render_method; end
    def render_method=(_arg0); end
    def render_output(output, options = T.unsafe(nil)); end
    def reset_render_method; end
    def resize(width = T.unsafe(nil), height = T.unsafe(nil)); end
    def toggle_formatter; end
    def toggle_pager; end
    def view_or_page_output(str); end
    def view_output(output, options = T.unsafe(nil)); end
    def width; end
  end
end

Hirb::View::DEFAULT_HEIGHT = T.let(T.unsafe(nil), Integer)
Hirb::View::DEFAULT_WIDTH = T.let(T.unsafe(nil), Integer)
module Hirb::Views; end

module Hirb::Views::CouchDb
  def couch_foo__base_view(obj); end
  def couch_potato__persistence_view(obj); end
  def couch_rest__extended_document_view(obj); end
  def default_couch(obj); end
end

module Hirb::Views::MiscDb
  def d_b_i__row_view(obj); end
  def friendly__document_view(obj); end
  def ripple__document_view(obj); end
end

module Hirb::Views::MongoDb
  def mongo_mapper__document_view(obj); end
  def mongo_mapper__embedded_document_view(obj); end
  def mongoid__document_view(obj); end
end

module Hirb::Views::ORM
  def data_mapper__resource_view(obj); end
  def sequel__model_view(obj); end
end

module Hirb::Views::Rails
  def active_record__base_view(obj); end
  def get_active_record_fields(obj); end
end

module Hirb::Views::Single; end
