# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hanami-assets` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Hanami
  class << self
    def app; end
    def app?(app); end
    def boot; end
    def code_reloading?; end
    def configuration; end
    def configure(&blk); end
    def env; end
    def env?(*names); end
    def environment; end
    def logger; end
    def plugin(&blk); end
    def plugins; end
    def public_directory; end
    def root; end
  end
end

module Hanami::Assets
  include ::Hanami::Utils::ClassAttribute
  extend ::Hanami::Utils::ClassAttribute::ClassMethods

  class << self
    def configuration; end
    def configuration=(_arg0); end
    def configure(&blk); end
    def deploy; end
    def dupe; end
    def duplicate(_mod, &blk); end
    def duplicates; end
    def load!; end
    def precompile(configurations); end
    def sources; end

    private

    def synchronize(&blk); end
  end
end

module Hanami::Assets::Config; end

class Hanami::Assets::Config::GlobalSources < ::Hanami::Utils::LoadPaths
  def <<(*paths); end
  def push(*paths); end

  private

  def sync_configuration; end
  def sync_duplicated_frameworks; end
end

class Hanami::Assets::Config::Manifest
  def initialize(assets, manifest_path); end

  def resolve(asset); end
  def subresource_integrity_values(path); end
  def target(path); end
end

Hanami::Assets::Config::Manifest::SUBRESOURCE_INTEGRITY = T.let(T.unsafe(nil), String)
Hanami::Assets::Config::Manifest::TARGET = T.let(T.unsafe(nil), String)

class Hanami::Assets::Config::NullManifest < ::Hanami::Utils::BasicObject
  def initialize(configuration); end

  def method_missing(*_arg0); end

  private

  def respond_to_missing?(*_arg0); end
end

class Hanami::Assets::Config::Sources < ::Hanami::Utils::LoadPaths
  def initialize(root); end

  def files(name = T.unsafe(nil)); end
  def find(filename); end
  def map; end
  def root=(_arg0); end

  private

  def realpath(path); end
end

Hanami::Assets::Config::Sources::SKIPPED_FILE_PREFIX = T.let(T.unsafe(nil), String)

class Hanami::Assets::Configuration
  def initialize(&blk); end

  def asset_path(source); end
  def asset_url(source); end
  def base_directories; end
  def cdn(value = T.unsafe(nil)); end
  def compile(value = T.unsafe(nil)); end
  def crossorigin?(source); end
  def css_compressor; end
  def destination_directory; end
  def duplicate; end
  def files; end
  def find(file); end
  def fingerprint(value = T.unsafe(nil)); end
  def host(value = T.unsafe(nil)); end
  def javascript_compressor(value = T.unsafe(nil)); end
  def js_compressor; end
  def load!; end
  def manifest(value = T.unsafe(nil)); end
  def manifest_path; end
  def nested(value = T.unsafe(nil)); end
  def port(value = T.unsafe(nil)); end
  def prefix(value = T.unsafe(nil)); end
  def public_directory(value = T.unsafe(nil)); end
  def public_manifest; end
  def reset!; end
  def root(value = T.unsafe(nil)); end
  def scheme(value = T.unsafe(nil)); end
  def source(file); end
  def sources; end
  def stylesheet_compressor(value = T.unsafe(nil)); end
  def subresource_integrity(*values); end
  def subresource_integrity_algorithms; end
  def subresource_integrity_value(source); end

  protected

  def cdn=(_arg0); end
  def compile=(_arg0); end
  def host=(_arg0); end
  def javascript_compressor=(_arg0); end
  def manifest=(_arg0); end
  def nested=(_arg0); end
  def port=(_arg0); end
  def prefix=(_arg0); end
  def public_directory=(_arg0); end
  def root=(_arg0); end
  def scheme=(_arg0); end
  def sources=(_arg0); end
  def stylesheet_compressor=(_arg0); end
  def subresource_integrity=(_arg0); end

  private

  def compile_path(source); end
  def url_port; end

  class << self
    def for(base); end
  end
end

Hanami::Assets::Configuration::DEFAULT_HOST = T.let(T.unsafe(nil), String)
Hanami::Assets::Configuration::DEFAULT_MANIFEST = T.let(T.unsafe(nil), String)
Hanami::Assets::Configuration::DEFAULT_PORT = T.let(T.unsafe(nil), String)
Hanami::Assets::Configuration::DEFAULT_PREFIX = T.let(T.unsafe(nil), String)
Hanami::Assets::Configuration::DEFAULT_PUBLIC_DIRECTORY = T.let(T.unsafe(nil), String)
Hanami::Assets::Configuration::DEFAULT_SCHEME = T.let(T.unsafe(nil), String)
Hanami::Assets::Configuration::DEFAULT_SUBRESOURCE_INTEGRITY_ALGORITHM = T.let(T.unsafe(nil), Symbol)
Hanami::Assets::Configuration::HTTPS_PORT = T.let(T.unsafe(nil), String)
Hanami::Assets::Configuration::HTTPS_SCHEME = T.let(T.unsafe(nil), String)
Hanami::Assets::Configuration::HTTP_PORT = T.let(T.unsafe(nil), String)
Hanami::Assets::Configuration::HTTP_SCHEME = T.let(T.unsafe(nil), String)
Hanami::Assets::Configuration::SUBRESOURCE_INTEGRITY_SEPARATOR = T.let(T.unsafe(nil), String)
Hanami::Assets::Configuration::URL_SEPARATOR = T.let(T.unsafe(nil), String)
class Hanami::Assets::Error < ::StandardError; end

module Hanami::Assets::Helpers
  include ::Hanami::Helpers::HtmlHelper

  def asset_path(source, push: T.unsafe(nil), as: T.unsafe(nil)); end
  def asset_url(source, push: T.unsafe(nil), as: T.unsafe(nil)); end
  def audio(source = T.unsafe(nil), options = T.unsafe(nil), &blk); end
  def favicon(source = T.unsafe(nil), options = T.unsafe(nil)); end
  def image(source, options = T.unsafe(nil)); end
  def javascript(*sources, push: T.unsafe(nil), **options); end
  def stylesheet(*sources, push: T.unsafe(nil), **options); end
  def video(source = T.unsafe(nil), options = T.unsafe(nil), &blk); end

  private

  def _absolute_url(source); end
  def _absolute_url?(source); end
  def _append_extension?(source, ext); end
  def _asset_url(source, push:, as:); end
  def _crossorigin?(source); end
  def _push_promise(url, as: T.unsafe(nil)); end
  def _relative_url(source); end
  def _safe_tags(*sources); end
  def _source_options(src, options, as:, &_blk); end
  def _subresource_integrity?; end
  def _subresource_integrity_value(source, ext); end
  def _typed_asset_path(source, ext, push: T.unsafe(nil), as: T.unsafe(nil)); end

  class << self
    def included(base); end
  end
end

Hanami::Assets::Helpers::ABSOLUTE_URL_MATCHER = T.let(T.unsafe(nil), Regexp)
Hanami::Assets::Helpers::CROSSORIGIN_ANONYMOUS = T.let(T.unsafe(nil), String)
Hanami::Assets::Helpers::DEFAULT_FAVICON = T.let(T.unsafe(nil), String)
Hanami::Assets::Helpers::FAVICON_MIME_TYPE = T.let(T.unsafe(nil), String)
Hanami::Assets::Helpers::FAVICON_REL = T.let(T.unsafe(nil), String)
Hanami::Assets::Helpers::JAVASCRIPT_EXT = T.let(T.unsafe(nil), String)
Hanami::Assets::Helpers::JAVASCRIPT_MIME_TYPE = T.let(T.unsafe(nil), String)
Hanami::Assets::Helpers::NEW_LINE_SEPARATOR = T.let(T.unsafe(nil), String)
Hanami::Assets::Helpers::QUERY_STRING_MATCHER = T.let(T.unsafe(nil), Regexp)
Hanami::Assets::Helpers::STYLESHEET_EXT = T.let(T.unsafe(nil), String)
Hanami::Assets::Helpers::STYLESHEET_MIME_TYPE = T.let(T.unsafe(nil), String)
Hanami::Assets::Helpers::STYLESHEET_REL = T.let(T.unsafe(nil), String)
Hanami::Assets::Helpers::WILDCARD_EXT = T.let(T.unsafe(nil), String)

class Hanami::Assets::MissingManifestAssetError < ::Hanami::Assets::Error
  def initialize(asset, manifest_path); end
end

class Hanami::Assets::MissingManifestFileError < ::Hanami::Assets::Error
  def initialize(path); end
end

Hanami::Assets::VERSION = T.let(T.unsafe(nil), String)
Hanami::DEFAULT_PUBLIC_DIRECTORY = T.let(T.unsafe(nil), String)
Hanami::VERSION = T.let(T.unsafe(nil), String)
