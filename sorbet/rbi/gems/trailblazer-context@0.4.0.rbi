# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `trailblazer-context` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Trailblazer
  class << self
    def Context(wrapped_options, mutable_options = T.unsafe(nil), context_options = T.unsafe(nil)); end
    def Operation(options); end
    def Option(proc); end
  end
end

module Trailblazer::Context
  private

  def build(wrapped_options, mutable_options, container_class:, **context_options); end
  def for_circuit(wrapped_options, mutable_options, _arg2, **_arg3); end

  class << self
    def build(wrapped_options, mutable_options, container_class:, **context_options); end
    def for_circuit(wrapped_options, mutable_options, _arg2, **_arg3); end
  end
end

class Trailblazer::Context::Container
  include ::Enumerable
  include ::Trailblazer::Context::Container::CommonMethods
  extend ::Trailblazer::Context::Container::Delegations

  def initialize(wrapped_options, mutable_options, replica_class:, aliases: T.unsafe(nil), **_arg4); end

  def decompose; end
  def inspect; end
  def to_s; end

  private

  def initialize_replica_store; end
end

module Trailblazer::Context::Container::CommonMethods
  include ::Enumerable

  def [](key); end
  def []=(key, value); end
  def delete(key); end
  def each(&block); end
  def fetch(key, default = T.unsafe(nil), &block); end
  def key?(key); end
  def keys; end
  def merge(other_hash); end
  def store(key, value); end
  def to_hash; end
  def value?(value); end
  def values; end
end

module Trailblazer::Context::Container::Delegations
  extend ::Forwardable

  def default(*args, &block); end
  def default=(*args, &block); end
  def default_proc(*args, &block); end
  def default_proc=(*args, &block); end
  def dig(*args, &block); end
  def each_key(*args, &block); end
  def each_value(*args, &block); end
  def fetch_values(*args, &block); end
  def index(*args, &block); end
  def key(*args, &block); end
  def slice(*args, &block); end
  def values_at(*args, &block); end
end

class Trailblazer::Context::Container::UseWithAliases < ::RuntimeError
  def message; end
end

class Trailblazer::Context::Container::WithAliases < ::Trailblazer::Context::Container
  def initialize(wrapped_options, mutable_options, aliases:, replica_class:, **_arg4); end

  def []=(key, value); end
  def alias_mapping_for(key); end
  def aliased_delete(key); end
  def aliased_merge(other_hash); end
  def aliased_writer(key, value); end
  def delete(key); end
  def inspect; end
  def merge(other_hash); end

  private

  def initialize_replica_store; end
  def replace_aliases_with_original_keys(hash); end
end

module Trailblazer::Context::Store; end

class Trailblazer::Context::Store::IndifferentAccess < ::Hash
  include ::Hashie::Extensions::IndifferentAccess

  def initialize(hashes); end

  def []=(key, value); end
  def convert_key(key); end
  def default(key = T.unsafe(nil)); end
  def delete(key); end
  def fetch(key, *args, &block); end
  def has_key?(key); end
  def include?(key); end
  def indifferent_value(value); end
  def key?(key); end
  def member?(key); end
  def regular_default(*_arg0); end
  def regular_delete(_arg0); end
  def regular_fetch(*_arg0); end
  def regular_key?(_arg0); end
  def regular_replace(_arg0); end
  def regular_update(*_arg0); end
  def regular_values_at(*_arg0); end
  def regular_writer(_arg0, _arg1); end
  def replace(other_hash); end
  def store(key, value); end
  def update(other_hash); end
  def values_at(*indices); end

  class << self
    def [](*_arg0); end
    def try_convert(*_arg0); end
  end
end

class Trailblazer::Option
  class << self
    def KW(proc); end
    def build(proc); end
    def call!(proc, *args, keyword_arguments: T.unsafe(nil), **_arg3, &block); end
    def evaluate_callable(proc, *args, **options, &block); end
    def evaluate_method(proc, *args, exec_context: T.unsafe(nil), **options, &block); end
  end
end
