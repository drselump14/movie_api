# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/trailblazer-developer/all/trailblazer-developer.rbi
#
# trailblazer-developer-0.0.21

module Trailblazer
end
module Trailblazer::Version
end
module Trailblazer::Version::Developer
end
module Trailblazer::Developer
  def render(activity, **options); end
  def self.railway(*args); end
  def self.render(activity, **options); end
  def self.wtf(activity, *args, **circuit_options); end
  def self.wtf?(activity, *args, **circuit_options); end
  def wtf(activity, *args, **circuit_options); end
end
module Trailblazer::Developer::Wtf
  def arguments_for_trace(activity, arg1, **circuit_options); end
  def capture_variables?(step_name:, focus_on:, **arg2); end
  def invoke(activity, arg1, **circuit_options); end
  def self.arguments_for_trace(activity, arg1, **circuit_options); end
  def self.capture_variables?(step_name:, focus_on:, **arg2); end
  def self.invoke(activity, arg1, **circuit_options); end
  def self.trace_input_data_collector(wrap_config, arg1, circuit_options); end
  def self.trace_output_data_collector(wrap_config, arg1, circuit_options); end
  def trace_input_data_collector(wrap_config, arg1, circuit_options); end
  def trace_output_data_collector(wrap_config, arg1, circuit_options); end
end
module Trailblazer::Developer::Wtf::Renderer
  def call(tree:, task_node:, position:); end
  def fmt(line, style); end
  def self.call(tree:, task_node:, position:); end
  def self.fmt(line, style); end
  def self.signal_of(task_node); end
  def self.value_for(tree, task_node, position); end
  def signal_of(task_node); end
  def value_for(tree, task_node, position); end
end
module Trailblazer::Developer::Wtf::Renderer::String
  def bg_black(str); end
  def bg_blue(str); end
  def bg_brown(str); end
  def bg_cyan(str); end
  def bg_gray(str); end
  def bg_green(str); end
  def bg_magenta(str); end
  def bg_red(str); end
  def black(str); end
  def blue(str); end
  def bold(str); end
  def brown(str); end
  def cyan(str); end
  def gray(str); end
  def green(str); end
  def italic(str); end
  def magenta(str); end
  def red(str); end
  def self.bg_black(str); end
  def self.bg_blue(str); end
  def self.bg_brown(str); end
  def self.bg_cyan(str); end
  def self.bg_gray(str); end
  def self.bg_green(str); end
  def self.bg_magenta(str); end
  def self.bg_red(str); end
  def self.black(str); end
  def self.blue(str); end
  def self.bold(str); end
  def self.brown(str); end
  def self.cyan(str); end
  def self.gray(str); end
  def self.green(str); end
  def self.italic(str); end
  def self.magenta(str); end
  def self.red(str); end
  def self.underline(str); end
  def underline(str); end
end
module Trailblazer::Developer::Trace
  def capture_args(wrap_config, arg1); end
  def capture_return(wrap_config, arg1); end
  def default_input_data_collector(wrap_config, arg1, circuit_options); end
  def default_output_data_collector(wrap_config, arg1, _); end
  def merge_plan; end
  def self.arguments_for_call(activity, arg1, **original_circuit_options); end
  def self.call(activity, arg1, **circuit_options); end
  def self.capture_args(wrap_config, arg1); end
  def self.capture_return(wrap_config, arg1); end
  def self.default_input_data_collector(wrap_config, arg1, circuit_options); end
  def self.default_output_data_collector(wrap_config, arg1, _); end
  def self.invoke(activity, arg1, **circuit_options); end
  def self.merge_plan; end
end
class Trailblazer::Developer::Trace::Entity < Struct
  def activity; end
  def activity=(_); end
  def data; end
  def data=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def task; end
  def task=(_); end
end
class Trailblazer::Developer::Trace::Entity::Input < Trailblazer::Developer::Trace::Entity
end
class Trailblazer::Developer::Trace::Entity::Output < Trailblazer::Developer::Trace::Entity
end
class Trailblazer::Developer::Trace::Level < Array
  def inspect; end
  def self.input_output_nested_for_level(level); end
end
class Trailblazer::Developer::Trace::Stack
  def <<(entity); end
  def current; end
  def indent!; end
  def initialize; end
  def to_a; end
  def top; end
  def unindent!; end
end
module Trailblazer::Developer::Trace::Present
  def call(stack, level: nil, tree: nil, renderer: nil, **options); end
  def default_renderer(task_node:, **arg1); end
  def self.call(stack, level: nil, tree: nil, renderer: nil, **options); end
  def self.default_renderer(task_node:, **arg1); end
  def self.tree(stack, level, tree:, renderer:, **options); end
  def self.tree_for(stack, level, tree:, **options); end
  def tree(stack, level, tree:, renderer:, **options); end
  def tree_for(stack, level, tree:, **options); end
end
module Trailblazer::Developer::Trace::Present::TreeNodes
  def for(level, input:, output:, **options); end
  def self.for(level, input:, output:, **options); end
end
class Trailblazer::Developer::Trace::Present::TreeNodes::Node < Struct
  def input; end
  def input=(_); end
  def level; end
  def level=(_); end
  def method_missing(name, *arg1); end
  def options; end
  def options=(_); end
  def output; end
  def output=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def value; end
  def value=(_); end
end
module Trailblazer::Developer::Trace::Focusable
  def capture_variables_from(ctx, focus_on:, inspector: nil, **flow_options); end
  def patched_vertical_table; end
  def self.capture_variables_from(ctx, focus_on:, inspector: nil, **flow_options); end
  def self.patched_vertical_table; end
  def self.tree_nodes_for(level, input:, output:, **options); end
  def self.vertical_table_for(focused_variables, table_header:); end
  def tree_nodes_for(level, input:, output:, **options); end
  def vertical_table_for(focused_variables, table_header:); end
end
module Trailblazer::Developer::Trace::Inspector
  def activerecord_relation_inspector(value); end
  def array_inspector(value, default_inspector:); end
  def call(value, default_inspector: nil, **arg2); end
  def default_inspector(value); end
  def hash_inspector(value, default_inspector:); end
  def self.activerecord_relation_inspector(value); end
  def self.array_inspector(value, default_inspector:); end
  def self.call(value, default_inspector: nil, **arg2); end
  def self.default_inspector(value); end
  def self.hash_inspector(value, default_inspector:); end
end
module Trailblazer::Developer::Generate
  def call(hash); end
  def compute_intermediate(ctx, elements:, start_events:, **arg3); end
  def data_for(element); end
  def extract_semantic(label); end
  def find_start_events(ctx, elements:, **arg2); end
  def self.call(hash); end
  def self.compute_intermediate(ctx, elements:, start_events:, **arg3); end
  def self.data_for(element); end
  def self.extract_semantic(label); end
  def self.find_start_events(ctx, elements:, **arg2); end
  def self.semantic_for(label: nil, **arg1); end
  def self.transform_from_hash(ctx, hash:, parser: nil, **arg3); end
  def semantic_for(label: nil, **arg1); end
  def transform_from_hash(ctx, hash:, parser: nil, **arg3); end
end
class Trailblazer::Developer::Generate::Element < Struct
  def data; end
  def data=(_); end
  def id; end
  def id=(_); end
  def label; end
  def label=(_); end
  def linksTo; end
  def linksTo=(_); end
  def parent; end
  def parent=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def type; end
  def type=(_); end
end
class Trailblazer::Developer::Generate::Arrow < Struct
  def label; end
  def label=(_); end
  def message; end
  def message=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def target; end
  def target=(_); end
  def target_lane; end
  def target_lane=(_); end
end
module Trailblazer::Developer::Generate::Representer
end
class Trailblazer::Developer::Generate::Representer::Activity < Representable::Decorator
  extend Representable::ClassMethods
  extend Representable::Declarative
  extend Representable::ForCollection
  extend Representable::Hash::ClassMethods
  extend Representable::ModuleExtensions
  extend Representable::Represent
  include Representable
  include Representable::Hash
end
class Trailblazer::Developer::Generate::Pipeline < Trailblazer::Activity::Railway
end
module Trailblazer::Developer::Render
end
module Trailblazer::Developer::Render::Circuit
  def call(activity, **options); end
  def circuit_hash(graph, **options); end
  def inspect_end(task); end
  def inspect_task(task); end
  def inspect_with_matcher(task, inspect_task: nil, inspect_end: nil); end
  def self.call(activity, **options); end
  def self.circuit_hash(graph, **options); end
  def self.inspect_end(task); end
  def self.inspect_task(task); end
  def self.inspect_with_matcher(task, inspect_task: nil, inspect_end: nil); end
  def self.strip(string); end
end
module Trailblazer::Developer::Render::Linear
  def call(operation, options = nil); end
  def inspect_func(step); end
  def inspect_line(names); end
  def inspect_rows(names); end
  def self.call(operation, options = nil); end
  def self.inspect_func(step); end
  def self.inspect_line(names); end
  def self.inspect_rows(names); end
end
