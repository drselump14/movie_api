# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `trailblazer-operation` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Trailblazer
  class << self
    def Context(wrapped_options, mutable_options = T.unsafe(nil), context_options = T.unsafe(nil)); end
    def Operation(options); end
    def Option(proc); end
  end
end

class Trailblazer::Activity
  def initialize(schema); end

  def [](*key); end
  def call(args, **circuit_options); end
  def inspect; end
  def to_h; end

  class << self
    def End(semantic); end
    def FastTrack(options); end
    def Output(signal, semantic); end
    def Path(options); end
    def Railway(options); end
  end
end

class Trailblazer::Activity::NodeAttributes < ::Struct
  def data; end
  def data=(_); end
  def id; end
  def id=(_); end
  def outputs; end
  def outputs=(_); end
  def task; end
  def task=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

module Trailblazer::Activity::Operation
  class << self
    def OptionsForState; end
  end
end

class Trailblazer::Activity::Output < ::Struct
  def semantic; end
  def semantic=(_); end
  def signal; end
  def signal=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Trailblazer::Activity::Railway
  include ::Trailblazer::Activity::DSL::Linear::Helper
  extend ::Trailblazer::Activity::DSL::Linear::Helper::ClassMethods
  extend ::Trailblazer::Activity::DSL::Linear::Strategy

  class << self
    private

    def fail(*args, &block); end
    def pass(*args, &block); end
  end
end

module Trailblazer::Activity::Railway::End; end
class Trailblazer::Activity::Railway::End::FailFast < ::Trailblazer::Activity::Railway::End::Failure; end
class Trailblazer::Activity::Railway::End::Failure < ::Trailblazer::Activity::End; end
class Trailblazer::Activity::Railway::End::PassFast < ::Trailblazer::Activity::Railway::End::Success; end
class Trailblazer::Activity::Railway::End::Success < ::Trailblazer::Activity::End; end

class Trailblazer::Operation < ::Trailblazer::Activity::FastTrack
  extend ::Trailblazer::Operation::PublicCall
  extend ::Trailblazer::Operation::Trace

  class << self
    def strategy_call(args, **circuit_options); end
  end
end

module Trailblazer::Operation::ClassDependencies
  def [](field); end
  def []=(field, value); end
  def call_with_circuit_interface(_arg0, **circuit_options); end
  def options_for_public_call(options, flow_options); end

  private

  def class_fields; end
  def context_for_fields(fields, _arg1, **_arg2); end
end

module Trailblazer::Operation::DeprecatedMacro
  class << self
    def call(proc, options); end
  end
end

module Trailblazer::Operation::PublicCall
  def call(options = T.unsafe(nil), flow_options = T.unsafe(nil), **circuit_options); end
  def call_task(wrap_ctx, original_args); end
  def call_with_circuit_interface(args, **circuit_options); end
  def call_with_flow_options(options, flow_options); end
  def call_with_public_interface(options, flow_options, invoke_class: T.unsafe(nil), **circuit_options); end
  def flow_options_for_public_call(options = T.unsafe(nil)); end
  def initial_wrap_static(*_arg0); end
  def options_for_public_call(*args); end

  class << self
    def options_for_public_call(options, flow_options = T.unsafe(nil)); end
  end
end

module Trailblazer::Operation::Railway
  class << self
    def Result(end_event, options, *_arg2); end
    def fail!; end
    def fail_fast!; end
    def pass!; end
    def pass_fast!; end
  end
end

module Trailblazer::Operation::Railway::End; end
Trailblazer::Operation::Railway::End::Failure = Trailblazer::Activity::Railway::End::Failure
Trailblazer::Operation::Railway::End::Success = Trailblazer::Activity::Railway::End::Success
Trailblazer::Operation::Railway::KwSignature = Trailblazer::Operation::Railway::Macaroni

module Trailblazer::Operation::Railway::Macaroni
  class << self
    def call(user_proc); end
  end
end

class Trailblazer::Operation::Railway::Macaroni::Option < ::Trailblazer::Option
  class << self
    def call!(proc, options, *_arg2); end
  end
end

class Trailblazer::Operation::Railway::Result < ::Trailblazer::Operation::Result
  def initialize(success, data, event); end

  def event; end
end

class Trailblazer::Operation::Result
  extend ::Forwardable

  def initialize(success, data); end

  def [](*args, &block); end
  def failure?; end
  def inspect(*slices); end
  def keys; end
  def slice(*keys); end
  def success?; end
  def to_hash; end

  private

  def data; end
end

module Trailblazer::Operation::Trace
  def trace(options); end
  def wtf?(options); end

  class << self
    def call(operation, options); end
  end
end

class Trailblazer::Operation::Trace::Result < ::SimpleDelegator
  def initialize(result, stack); end

  def wtf; end
  def wtf?; end
end

module Trailblazer::Version; end
module Trailblazer::Version::Operation; end
Trailblazer::Version::Operation::VERSION = T.let(T.unsafe(nil), String)
Trailblazer::Version::VERSION = T.let(T.unsafe(nil), String)
