# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dry-system/all/dry-system.rbi
#
# dry-system-0.9.2

module Dry
end
module Dry::System
  def self.providers; end
  def self.register_component(identifier, provider:, &block); end
  def self.register_provider(identifier, options); end
  include Dry::Core::Constants
end
class Dry::System::DuplicatedComponentKeyError < ArgumentError
end
class Dry::System::PluginDependencyMissing < StandardError
  def initialize(plugin, message); end
end
module Dry::System::Settings
end
class Dry::System::Settings::FileParser
  def call(file); end
  def parse_line(line, hash); end
  def parse_value(value); end
end
class Dry::System::Settings::FileLoader
  def call(root, env); end
  def files(root, env); end
  def parser; end
end
class Dry::System::Settings::DSL < BasicObject
  def call; end
  def identifier; end
  def initialize(identifier, &block); end
  def key(name, type); end
  def schema; end
end
module Anonymous_Dry_Equalizer_31
  def cmp?(comparator, other); end
  def hash; end
  def inspect; end
end
class Dry::System::Settings::Configuration < Dry::Struct
  def self.load(root, env); end
  def self.load_files(root, env); end
  def self.setting(*args); end
  include Anonymous_Dry_Equalizer_31
  include Dry::Equalizer::Methods
end
class Dry::System::Lifecycle < BasicObject
  def call(*triggers); end
  def component; end
  def config; end
  def configure(&block); end
  def container; end
  def init(&block); end
  def initialize(container, opts, &block); end
  def method_missing(meth, *args, &block); end
  def opts; end
  def register(*args, &block); end
  def self.cache; end
  def self.new(container, opts = nil, &block); end
  def settings(&block); end
  def start(&block); end
  def statuses; end
  def stop(&block); end
  def target; end
  def trigger!(name, &block); end
  def triggers; end
  def use(*names); end
end
module Dry::System::Components
end
class Dry::System::Components::Config
  def initialize; end
  def method_missing(meth, value = nil); end
  def self.new(&block); end
  def to_hash; end
end
class Dry::System::Components::Bootable
  def after(event, &block); end
  def before(event, &block); end
  def block; end
  def boot?; end
  def boot_file; end
  def boot_path; end
  def config; end
  def configure!; end
  def configure(&block); end
  def container; end
  def container_boot_files; end
  def finalize; end
  def identifier; end
  def init; end
  def initialize(identifier, options = nil, &block); end
  def lf_container; end
  def lifecycle; end
  def namespace; end
  def new(identifier, new_options = nil); end
  def options; end
  def settings(&block); end
  def start; end
  def statuses; end
  def stop; end
  def trigger(key, event); end
  def triggers; end
  def with(new_options); end
end
class Dry::System::Provider
  def boot_file(name); end
  def boot_files; end
  def boot_path; end
  def component(name, options = nil); end
  def components; end
  def identifier; end
  def initialize(identifier, options); end
  def load_components; end
  def options; end
  def register_component(name, fn); end
end
class Dry::System::ProviderRegistry
  def [](identifier); end
  def each(&block); end
  def initialize; end
  def items; end
  def register(identifier, options); end
  include Enumerable
end
