# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `slop` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

class Slop
  include ::Enumerable

  def initialize(config = T.unsafe(nil), &block); end

  def [](key); end
  def add_callback(label, &block); end
  def banner(banner = T.unsafe(nil)); end
  def banner=(banner); end
  def command(command, options = T.unsafe(nil), &block); end
  def commands; end
  def config; end
  def description(desc = T.unsafe(nil)); end
  def description=(desc); end
  def each(&block); end
  def fetch_command(command); end
  def fetch_option(key); end
  def get(key); end
  def help; end
  def missing; end
  def on(*objects, &block); end
  def opt(*objects, &block); end
  def option(*objects, &block); end
  def options; end
  def parse(items = T.unsafe(nil), &block); end
  def parse!(items = T.unsafe(nil), &block); end
  def present?(*keys); end
  def run(callable = T.unsafe(nil), &block); end
  def separator(text); end
  def strict?; end
  def to_h(include_commands = T.unsafe(nil)); end
  def to_hash(include_commands = T.unsafe(nil)); end
  def to_s; end

  private

  def autocreate(items, index); end
  def build_option(objects, &block); end
  def clean(object); end
  def commands_to_help; end
  def execute_multiple_switches(option, argument, items, index); end
  def execute_option(option, argument, index, item = T.unsafe(nil)); end
  def extract_long_flag(objects, config); end
  def extract_option(flag); end
  def extract_short_flag(objects, config); end
  def method_missing(method, *args, &block); end
  def process_item(items, index, &block); end
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  class << self
    def optspec(string, config = T.unsafe(nil)); end
    def parse(items = T.unsafe(nil), config = T.unsafe(nil), &block); end
    def parse!(items = T.unsafe(nil), config = T.unsafe(nil), &block); end
  end
end

class Slop::Commands
  include ::Enumerable

  def initialize(config = T.unsafe(nil), &block); end

  def [](key); end
  def arguments; end
  def banner(banner = T.unsafe(nil)); end
  def banner=(_arg0); end
  def commands; end
  def config; end
  def default(config = T.unsafe(nil), &block); end
  def each(&block); end
  def get(key); end
  def global(config = T.unsafe(nil), &block); end
  def help; end
  def inspect; end
  def on(command, config = T.unsafe(nil), &block); end
  def parse(items = T.unsafe(nil)); end
  def parse!(items = T.unsafe(nil)); end
  def present?(key); end
  def to_hash; end
  def to_s; end

  private

  def execute_arguments!(items); end
  def execute_global_opts!(items); end
end

Slop::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)
class Slop::Error < ::StandardError; end
class Slop::InvalidArgumentError < ::Slop::Error; end
class Slop::InvalidCommandError < ::Slop::Error; end
class Slop::InvalidOptionError < ::Slop::Error; end
class Slop::MissingArgumentError < ::Slop::Error; end
class Slop::MissingOptionError < ::Slop::Error; end

class Slop::Option
  def initialize(slop, short, long, description, config = T.unsafe(nil), &block); end

  def accepts_optional_argument?; end
  def argument_in_value; end
  def argument_in_value=(_arg0); end
  def call(*objects); end
  def config; end
  def count; end
  def count=(_arg0); end
  def description; end
  def expects_argument?; end
  def help; end
  def inspect; end
  def key; end
  def long; end
  def short; end
  def to_s; end
  def types; end
  def value; end
  def value=(new_value); end

  private

  def value_to_float(value); end
  def value_to_integer(value); end
  def value_to_range(value); end
end

Slop::Option::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)
Slop::VERSION = T.let(T.unsafe(nil), String)
